// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"generated/graphqlgen.ts":[function(require,module,exports) {
"use strict"; // Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

exports.__esModule = true;
var QueryResolvers;

(function (QueryResolvers) {
  QueryResolvers.defaultResolvers = {};
})(QueryResolvers = exports.QueryResolvers || (exports.QueryResolvers = {}));

var ModelPayloadResolvers;

(function (ModelPayloadResolvers) {
  ModelPayloadResolvers.defaultResolvers = {
    yield: function (parent) {
      return parent.yield === undefined ? null : parent.yield;
    }
  };
})(ModelPayloadResolvers = exports.ModelPayloadResolvers || (exports.ModelPayloadResolvers = {}));
},{}],"resolvers/Query.ts":[function(require,module,exports) {
"use strict";

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__esModule = true;

var graphqlgen_1 = require("../generated/graphqlgen");

exports.Query = __assign({}, graphqlgen_1.QueryResolvers.defaultResolvers, {
  model: function (parent, args, ctx) {
    var res = Math.random() * 100;
    return {
      yield: Math.round(res * 100) / 100
    };
  }
});
},{"../generated/graphqlgen":"generated/graphqlgen.ts"}],"resolvers/ModelPayload.ts":[function(require,module,exports) {
"use strict";

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__esModule = true;

var graphqlgen_1 = require("../generated/graphqlgen");

exports.ModelPayload = __assign({}, graphqlgen_1.ModelPayloadResolvers.defaultResolvers);
},{"../generated/graphqlgen":"generated/graphqlgen.ts"}],"resolvers/index.ts":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var Query_1 = require("./Query");

var ModelPayload_1 = require("./ModelPayload");

exports.resolvers = {
  Query: Query_1.Query,
  ModelPayload: ModelPayload_1.ModelPayload
};
},{"./Query":"resolvers/Query.ts","./ModelPayload":"resolvers/ModelPayload.ts"}],"schema.graphql":[function(require,module,exports) {
module.exports = {
  "kind": "Document",
  "definitions": [{
    "kind": "ObjectTypeDefinition",
    "name": {
      "kind": "Name",
      "value": "ModelPayload"
    },
    "interfaces": [],
    "directives": [],
    "fields": [{
      "kind": "FieldDefinition",
      "name": {
        "kind": "Name",
        "value": "yield"
      },
      "arguments": [],
      "type": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "Float"
        }
      },
      "directives": []
    }]
  }, {
    "kind": "InputObjectTypeDefinition",
    "name": {
      "kind": "Name",
      "value": "Coordinates"
    },
    "directives": [],
    "fields": [{
      "kind": "InputValueDefinition",
      "name": {
        "kind": "Name",
        "value": "latitude"
      },
      "type": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "Float"
        }
      },
      "directives": []
    }, {
      "kind": "InputValueDefinition",
      "name": {
        "kind": "Name",
        "value": "longitude"
      },
      "type": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "Float"
        }
      },
      "directives": []
    }]
  }, {
    "kind": "ObjectTypeDefinition",
    "name": {
      "kind": "Name",
      "value": "Query"
    },
    "interfaces": [],
    "directives": [],
    "fields": [{
      "kind": "FieldDefinition",
      "name": {
        "kind": "Name",
        "value": "model"
      },
      "arguments": [{
        "kind": "InputValueDefinition",
        "name": {
          "kind": "Name",
          "value": "input"
        },
        "type": {
          "kind": "NamedType",
          "name": {
            "kind": "Name",
            "value": "Coordinates"
          }
        },
        "directives": []
      }],
      "type": {
        "kind": "NamedType",
        "name": {
          "kind": "Name",
          "value": "ModelPayload"
        }
      },
      "directives": []
    }]
  }],
  "loc": {
    "start": 0,
    "end": 155
  }
};
},{}],"index.ts":[function(require,module,exports) {
"use strict";

exports.__esModule = true;

var apollo_server_1 = require("apollo-server");

var resolvers_1 = require("./resolvers/");

var typeDefs = require("./schema.graphql");

var view = function () {
  console.log("Coffee server is working ☕️🐸");
  var server = new apollo_server_1.ApolloServer({
    resolvers: resolvers_1.resolvers,
    typeDefs: typeDefs
  });
  server.listen({
    port: 3434
  }, function () {
    console.log("Coffee ☕️ server is now listening on localhost:3434");
  });
};

view();
},{"./resolvers/":"resolvers/index.ts","./schema.graphql":"schema.graphql"}]},{},["index.ts"], null)
//# sourceMappingURL=/index.map