{"version":3,"sources":["generated/graphqlgen.ts","resolvers/Query.ts","resolvers/ModelPayload.ts","resolvers/index.ts","index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAAA;;;AAMA,IAAiB,cAAjB;;AAAA,CAAA,UAAiB,cAAjB,EAA+B;AAChB,EAAA,cAAA,CAAA,gBAAA,GAAmB,EAAnB;AA8Cd,CA/CD,EAAiB,cAAc,GAAd,OAAA,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAjB;;AAiDA,IAAiB,qBAAjB;;AAAA,CAAA,UAAiB,qBAAjB,EAAsC;AACvB,EAAA,qBAAA,CAAA,gBAAA,GAAmB;AAC9B,IAAA,KAAK,EAAE,UAAC,MAAD,EAAqB;AAC1B,aAAA,MAAM,CAAC,KAAP,KAAiB,SAAjB,GAA6B,IAA7B,GAAoC,MAAM,CAAC,KAA3C;AAAgD;AAFpB,GAAnB;AAwCd,CAzCD,EAAiB,qBAAqB,GAArB,OAAA,CAAA,qBAAA,KAAA,OAAA,CAAA,qBAAA,GAAqB,EAArB,CAAjB;;;;;;;;;;;;;;;;;;;;ACvDA,IAAA,YAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEa,OAAA,CAAA,KAAA,GAAK,QAAA,CAAA,EAAA,EACb,YAAA,CAAA,cAAA,CAAe,gBADF,EACkB;AAClC,EAAA,KAAK,EAAE,UAAC,MAAD,EAAS,IAAT,EAAe,GAAf,EAAkB;AACvB,UAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACD;AAHiC,CADlB,CAAL;;;;;;;;;;;;;;;;;;;;ACFb,IAAA,YAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEa,OAAA,CAAA,YAAA,GAAY,QAAA,CAAA,EAAA,EACpB,YAAA,CAAA,qBAAA,CAAsB,gBADF,CAAZ;;;;;;ACDb,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEa,OAAA,CAAA,SAAA,GAAuB;AAClC,EAAA,KAAK,EAAA,OAAA,CAAA,KAD6B;AAElC,EAAA,YAAY,EAAA,cAAA,CAAA;AAFsB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJb,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAM,QAAQ,GAAG,OAAO,CAAC,kBAAD,CAAxB;;AAEA,IAAM,IAAI,GAAG,YAAA;AACX,EAAA,OAAO,CAAC,GAAR,CAAY,+BAAZ;AAEA,MAAM,MAAM,GAAG,IAAI,eAAA,CAAA,YAAJ,CAAiB;AAAE,IAAA,SAAS,EAAA,WAAA,CAAA,SAAX;AAAa,IAAA,QAAQ,EAAA;AAArB,GAAjB,CAAf;AAEA,EAAA,MAAM,CAAC,MAAP,CAAc;AAAE,IAAA,IAAI,EAAE;AAAR,GAAd,EAA8B,YAAA;AAC5B,IAAA,OAAO,CAAC,GAAR,CAAY,qDAAZ;AACD,GAFD;AAGD,CARD;;AAUA,IAAI","file":"index.map","sourceRoot":"../src","sourcesContent":["// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.\n\nimport { GraphQLResolveInfo } from \"graphql\";\nimport { ModelPayload } from \"../models\";\nimport { Context } from \"../context\";\n\nexport namespace QueryResolvers {\n  export const defaultResolvers = {};\n\n  export interface Coordinates {\n    latitude?: number | null;\n    longitude?: number | null;\n  }\n\n  export interface ArgsModel {\n    input?: Coordinates | null;\n  }\n\n  export type ModelResolver =\n    | ((\n        parent: undefined,\n        args: ArgsModel,\n        ctx: Context,\n        info: GraphQLResolveInfo\n      ) => ModelPayload | null | Promise<ModelPayload | null>)\n    | {\n        fragment: string;\n        resolve: (\n          parent: undefined,\n          args: ArgsModel,\n          ctx: Context,\n          info: GraphQLResolveInfo\n        ) => ModelPayload | null | Promise<ModelPayload | null>;\n      };\n\n  export interface Type {\n    model:\n      | ((\n          parent: undefined,\n          args: ArgsModel,\n          ctx: Context,\n          info: GraphQLResolveInfo\n        ) => ModelPayload | null | Promise<ModelPayload | null>)\n      | {\n          fragment: string;\n          resolve: (\n            parent: undefined,\n            args: ArgsModel,\n            ctx: Context,\n            info: GraphQLResolveInfo\n          ) => ModelPayload | null | Promise<ModelPayload | null>;\n        };\n  }\n}\n\nexport namespace ModelPayloadResolvers {\n  export const defaultResolvers = {\n    yield: (parent: ModelPayload) =>\n      parent.yield === undefined ? null : parent.yield\n  };\n\n  export type YieldResolver =\n    | ((\n        parent: ModelPayload,\n        args: {},\n        ctx: Context,\n        info: GraphQLResolveInfo\n      ) => number | null | Promise<number | null>)\n    | {\n        fragment: string;\n        resolve: (\n          parent: ModelPayload,\n          args: {},\n          ctx: Context,\n          info: GraphQLResolveInfo\n        ) => number | null | Promise<number | null>;\n      };\n\n  export interface Type {\n    yield:\n      | ((\n          parent: ModelPayload,\n          args: {},\n          ctx: Context,\n          info: GraphQLResolveInfo\n        ) => number | null | Promise<number | null>)\n      | {\n          fragment: string;\n          resolve: (\n            parent: ModelPayload,\n            args: {},\n            ctx: Context,\n            info: GraphQLResolveInfo\n          ) => number | null | Promise<number | null>;\n        };\n  }\n}\n\nexport interface Resolvers {\n  Query: QueryResolvers.Type;\n  ModelPayload: ModelPayloadResolvers.Type;\n}\n\n// @ts-ignore\ndeclare module \"graphql-tools\" {\n  interface IResolvers extends Resolvers {}\n}\n","import { QueryResolvers } from \"../generated/graphqlgen\"\n\nexport const Query: QueryResolvers.Type = {\n  ...QueryResolvers.defaultResolvers,\n  model: (parent, args, ctx) => {\n    throw new Error(\"Resolver not implemented\")\n  }\n}\n","import { ModelPayloadResolvers } from \"../generated/graphqlgen\"\n\nexport const ModelPayload: ModelPayloadResolvers.Type = {\n  ...ModelPayloadResolvers.defaultResolvers\n}\n","import { Resolvers } from \"../generated/graphqlgen\"\nimport { Query } from \"./Query\"\nimport { ModelPayload } from \"./ModelPayload\"\n\nexport const resolvers: Resolvers = {\n  Query,\n  ModelPayload\n}\n","import { ApolloServer } from \"apollo-server\"\nimport { resolvers } from \"./resolvers/\"\nconst typeDefs = require(\"./schema.graphql\")\n\nconst view = () => {\n  console.log(\"Coffee server is working ‚òïÔ∏èüê∏\")\n\n  const server = new ApolloServer({ resolvers, typeDefs })\n\n  server.listen({ port: 3434 }, () => {\n    console.log(\"Coffee ‚òïÔ∏è server is now listening on localhost:3434\")\n  })\n}\n\nview()\n"]}