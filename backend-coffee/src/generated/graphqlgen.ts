// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { ModelPayload } from "../models";
import { Context } from "../context";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface Coordinates {
    latitude?: number | null;
    longitude?: number | null;
  }

  export interface ArgsModel {
    input?: Coordinates | null;
  }

  export type ModelResolver =
    | ((
        parent: undefined,
        args: ArgsModel,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => ModelPayload | null | Promise<ModelPayload | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsModel,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => ModelPayload | null | Promise<ModelPayload | null>;
      };

  export interface Type {
    model:
      | ((
          parent: undefined,
          args: ArgsModel,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => ModelPayload | null | Promise<ModelPayload | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsModel,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => ModelPayload | null | Promise<ModelPayload | null>;
        };
  }
}

export namespace ModelPayloadResolvers {
  export const defaultResolvers = {
    yield: (parent: ModelPayload) =>
      parent.yield === undefined ? null : parent.yield
  };

  export type YieldResolver =
    | ((
        parent: ModelPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | null | Promise<number | null>)
    | {
        fragment: string;
        resolve: (
          parent: ModelPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>;
      };

  export interface Type {
    yield:
      | ((
          parent: ModelPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | null | Promise<number | null>)
      | {
          fragment: string;
          resolve: (
            parent: ModelPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | null | Promise<number | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  ModelPayload: ModelPayloadResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
